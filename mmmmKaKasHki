const { Op } = require('sequelize');
const Project = require('../models').project;
const Milestone = require('../models').milestone;
const User = require('../models').user;
const ProjectStatus = require('../models').projectStatus;
const Role = require('../models').role;
const UserProject = require('../models').userProject;
const UserImage = require('../models').image;
const Task = require('../models').task;
const Note = require('../models').note;
const MilestoneStatus = require('../models').milestoneStatus;
const Blocker = require('../models').blocker;

function sendError(res, errorMessage) {
  res.json({
    error: true,
    errorMessage,
  });
}

function getProjectData(projectId) {
  return Project.findByPk(projectId, {
    order: [
      [{ model: Task, as: 'tasks' }, 'taskOrder', 'ASC'],
    ],
    include: {
      model: Task,
      as: 'tasks',
      attributes: ['endStart', 'taskOrder', 'dateStart'],
    },
  });
}

function getProjectTaskBlockers(projectId) {
  return Project.findByPk(projectId, {
    include: {
      model: Task,
      as: 'tasks',
      include: {
        model: Task,
        as: 'blockers',
      },
    },
  });
}

function getMilestones(_projectId) {
  return Milestone.findAll({
    where: {
      projectId: _projectId,
    },
    include: [{
      model: MilestoneStatus,
    }, {
      model: Task,
      attributes: ['optimisticTime', 'pessimisticTime'],
    }],
  });
}

function buildBLockersPart(_blockers, task) {
  const blockers = [];
  _blockers.forEach((blocker) => {
    blockers.push({
      taskId: task.taskId,
      taskName: task.taskName,
      taskBlockerId: blocker.taskId,
      taskBlockerName: blocker.taskName,
    });
  });
  return blockers;
}

function buildTasksWithBlockers(tasks) {
  let blockers = [];
  tasks.forEach((task) => {
    if (task.blockers.length) {
      blockers = blockers.concat(buildBLockersPart(task.blockers, task));
    }
  });
  return blockers;
}

function getProjectSettings(projectId) {
  let projectInfo;
  return getProjectData(projectId)
    .then((coreProjectInfo) => {
      projectInfo = coreProjectInfo;
      if (projectInfo.tasks.length) {
        projectInfo.startDate = projectInfo.tasks[0].dateStart;
        projectInfo.endDate = projectInfo.tasks[projectInfo.tasks.length - 1].endStart;
        delete projectInfo.tasks;
      } else {
        projectInfo.startDate = null;
      }
      return projectInfo;
    })
    .catch((err) => {
      throw err.message;
    });
}

exports.project_info_get = (req, res) => {
  getProjectSettings(req.params.projectId)
    .then((projectInfo) => res.json(projectInfo))
    .catch((err) => {
      throw err;
    });
};

function getAllProjectManagers() {
  return User.findAll({
    include: {
      model: Role,
      where: {
        roleName: 'Project Manager',
      },
    },
  });
}

exports.project_managers_get = (req, res) => {
  getAllProjectManagers()
    .then((_projectManagers) => res.json(_projectManagers))
    .catch((err) => sendError(res, err.message));
};

function checkProjectNameExist(projectId, projectName) {
  return Project.findAll({
    where: {
      projectName,
      [Op.not]: {
        projectId,
      },
    },
  });
}

function updateProject(projectData) {
  return Project.update({
    projectName: projectData.projectName,
    description: projectData.description,
    url: projectData.url,
    startDate: projectData.startDate,
    projectStatusId: projectData.projectStatusId,
    currentProjectManagerId: projectData.currentProjectManagerId || null,
  }, {
    where: {
      projectId: projectData.projectId,
    },
  });
}

function updateProjectData(projectData) {
  return checkProjectNameExist(projectData.projectId, projectData.projectName)
    .then((_project) => {
      if (_project.length) {
        throw new Error('Project with same name already exist');
      } else {
        return true;
      }
    })
    .then(() => updateProject(projectData))
    .catch((err) => {
      throw err;
    });
}

exports.update_project_info_post = (req, res) => {
  updateProjectData(req.body)
    .then(() => {
      res.json({
        error: false,
      });
    })
    .catch((error) => {
      sendError(res, error);
    });
};

function createMilestone(milestone) {
  return Milestone.create({
    name: milestone.name,
    projectId: milestone.projectId,
    milestoneStatusId: milestone.milestoneStatusId,
  }, {
    fields: [
      'name',
      'projectId',
      'milestoneStatusId',
    ],
  });
}

function checkMilestone(milestone) {
  return Milestone.findAll({
    where: {
      [Op.and]: [
        { name: milestone.name },
        { projectId: milestone.projectId },
      ],
    },
  });
}

exports.create_milestone_put = (req, res) => {
  checkMilestone(req.body)
    .then((milestone) => {
      if (milestone.length) {
        throw new Error('Milestone with same name already exist');
      } else {
        return createMilestone(req.body);
      }
    })
    .then(() => {
      res.json({
        error: false,
      });
    })
    .catch((error) => {
      sendError(res, error.message);
    });
};

function getMilestoneStatuses() {
  return MilestoneStatus.findAll();
}

exports.milestone_statuses_get = (req, res) => {
  getMilestoneStatuses()
    .then((milestoneStatuses) => {
      res.json(milestoneStatuses);
    })
    .catch((err) => {
      throw err.message;
    });
};

exports.milestones_get = (req, res) => {
  const milestonesInfo = [];
  getMilestones(req.params.projectId)
    .then((milestones) => {
      milestones.forEach((milestone) => {
        milestonesInfo.push(milestone.dataValues);
      });
      res.json(milestonesInfo);
    })
    .catch((err) => {
      throw err.message;
    });
};

exports.blockers_get = (req, res) => {
  getProjectTaskBlockers(req.params.projectId)
    .then((coreProjectInfo) => coreProjectInfo.dataValues.tasks)
    .then((tasks) => buildTasksWithBlockers(tasks))
    .then((tasksWithBlockers) => {
      res.json(tasksWithBlockers);
    })
    .catch((err) => {
      throw err.message;
    });
};

function getMembers(projectId) {
  return Project.findByPk(projectId, {
    include: {
      model: User,
      include: [{
        model: Role,
      },
      {
        model: UserImage,
        attributes: ['image'],
      }],
    },
  });
}

exports.members_get = (req, res) => {
  const members = [];
  getMembers(req.params.projectId)
    .then((project) => {
      project.users.forEach((member) => {
        /* eslint no-param-reassign: ["error",
        { "props": true, "ignorePropertyModificationsFor": ["member"] }] */
        member.dataValues.image = member.dataValues.image.image;
        delete member.dataValues.userProject;
        members.push(member.dataValues);
      });

      res.json(members);
    })
    .catch((err) => {
      throw err.message;
    });
};

function deleteMilestones(milestonesArray) {
  return Milestone.destroy({
    where: {
      id: milestonesArray,
    },
  });
}

exports.milestones_delete = (req, res) => {
  deleteMilestones(req.body)
    .then(() => {
      res.json({
        error: false,
      });
    })
    .catch((error) => {
      sendError(res, error.message);
    });
};

exports.add_task_blocker = (req, res) => {
  Blocker.create({
    taskId: req.body.taskId,
    taskBlockerId: req.body.taskBlockerId,
  }, {
    fields: [
      'taskId',
      'taskBlockerId',
    ],
  })
    .then(() => {
      res.json({
        error: false,
      });
    })
    .catch((error) => {
      sendError(res, error.message);
    });
};

exports.delete_task_blocker_post = (req, res) => {
  const taskIdArray = [];
  const taskBlockerIdArray = [];
  req.body.forEach((taskWithBlocker) => {
    taskIdArray.push(taskWithBlocker.taskId);
    taskBlockerIdArray.push(taskWithBlocker.taskBlockerId);
  });
  Blocker.destroy({
    where: {
      [Op.and]: [
        { taskId: taskIdArray },
        { taskBlockerId: taskBlockerIdArray },
      ],
    },
  })
    .then(() => {
      res.json({
        error: false,
      });
    })
    .catch((error) => {
      sendError(res, error.message);
    });
};

exports.notes_get = (req, res) => {
  Note.findAll({
    where: {
      projectId: req.params.projectId,
    },
    attributes: ['noteId', 'noteName', 'note'],
  })
    .then((notes) => {
      res.json(notes);
    })
    .catch((err) => {
      throw err.message;
    });
};

function checkNoteExist(noteName, projectId) {
  return Note.findAll({
    where: {
      [Op.and]: [
        { noteName },
        { projectId },
      ],
    },
  });
}

function createNote(req) {
  return Note.create({
    noteName: req.body.noteName,
    note: req.body.note,
    projectId: req.body.projectId,
  }, {
    fields: ['noteName', 'note', 'projectId'],
  });
}

exports.create_note_put = (req, res) => {
  checkNoteExist(req.body.noteName, req.body.projectId)
    .then((noteAlreadyExist) => {
      if (noteAlreadyExist.length) {
        throw new Error('Note with same name already exist!');
      } else {
        return true;
      }
    })
    .then(() => createNote(req))
    .then(() => {
      res.json({
        error: false,
      });
    })
    .catch((err) => {
      sendError(res, err.message);
    });
};

exports.delete_notes_post = (req, res) => {
  Note.destroy({
    where: {
      noteId: req.body,
    },
  })
    .then(() => {
      res.json({
        error: false,
      });
    })
    .catch((err) => {
      sendError(res, err.message);
    });
};

exports.project_exist_get = (req, res) => {
  Project.findByPk(req.params.projectId)
    .then((project) => {
      res.json(!!project);
    });
};

exports.project_status_check_completed_get = (req, res) => {
  Task.findAll({
    where: {
      projectId: req.params.projectId,
    },
    attributes: ['completed'],
  })
    .then((tasks) => {
      let completedStatusDisabled = false;
      tasks.forEach((task) => {
        if (task.completed < 100) {
          completedStatusDisabled = true;
        }
      });
      return completedStatusDisabled;
    })
    .then((completedDisabled) => {
      if (!completedDisabled) {
        return ProjectStatus.findAll({
          attributes: ['projectStatusName', 'projectStatusId'],
        });
      }
      return ProjectStatus.findAll({
        attributes: ['projectStatusName', 'projectStatusId'],
        where: {
          [Op.not]: {
            projectStatusName: 'Completed',
          },
        },
      });
    })
    .then((projectStatuses) => {
      res.json(projectStatuses);
    })
    .catch((err) => {
      throw err.message;
    });
};

exports.members_delete = (req, res) => {
  UserProject.destroy({
    where: {
      [Op.and]: [
        { userId: req.body },
        { projectId: req.params.projectId },
      ],
    },
  })
    .then(() => {
      if (req.params.projectManagerId !== 'undefined') {
        Project.update({
          currentProjectManagerId: null,
        }, {
          where: {
            projectId: req.params.projectId,
          },
        });
      }
      res.json({
        error: false,
      });
    })
    .catch((err) => {
      sendError(res, err.message);
    });
};
